<?php
/**
 * @file hs_import.module
 * Gestion des imports de données Hearthstone.
 */


/**
 * Implements hook_form().
 */
function hs_import_batch_form($form, &$form_state) {
  $form = array();
  $form['flush'] = array(
    '#type' => 'checkbox',
    '#title' => 'Vider la base avant import ?',
    '#default_value' => 0,
  );

  $terms = taxonomy_term_load_multiple(NULL, array('vid' => taxonomy_vocabulary_machine_name_load('set')->vid));
  $options = array();
  foreach ($terms as $term) {
    $options[$term->name . '|' . $term->field_source[LANGUAGE_NONE][0]['value']] = $term->name;
  }
  $form['sources'] = array(
    '#type' => 'checkboxes',
    '#title' => format_plural(count($options), 'Importer la source suivante :', 'Importer la/les source(s) suivante(s) :'),
    '#options' => $options,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Importer',
    '#submit' => array('hs_import_batch_form_submit'),
  );
  return $form;
}


/**
 * Implements hook_menu().
 */
function hs_import_menu() {
  $items = array();
  $items['admin/hearthstone'] = array(
    'title' => 'Hearthstone',
    'page callback' => 'hs_import_admin_page',
    'access arguments' => array('administrer hs import'),
    'access callback' => TRUE,
    'weight' => -1000,
  );
  $items['admin/hearthstone/import'] = array(
    'title' => 'Importation des cartes',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hs_import_batch_form'),
    'access callback' => TRUE,
    'type' => MENU_LOCAL_ACTION,
  );
  return $items;
}


/**
 * @TODO
 */
function hs_import_admin_page() {
  return "Bienvenue sur l'espace d'administration Hearthstone Cards !";
}


/**
 * @TODO
 */
function hs_import_batch_form_submit($form, &$form_state) {
  
  if ($form_state['values']['flush'] == 1) {
    $query = db_select('node', 'n')
      ->fields('n', array('nid'))
      ->condition('n.type', 'carte');
    $results = $query->execute()->fetchCol();
    foreach ($results as $nid) {
      node_delete($nid);
    }
  }
  
  $sources = $form_state['values']['sources'];
  $operations = array();
  foreach ($sources as $source => $ok) {
    if ($ok) {
      $parts = explode('|', $source);
      $data_json = file_get_contents($parts[1]);
      $data = json_decode($data_json);
      foreach ($data as $card) {
        $operations[] = array('hs_import_batch_process', array($card, $parts[0]));
      }
    }
  }
  
  if (!empty($operations)) {
    $batch = array(
      'title' => 'Importation',
      'operations' => $operations,
      'finished' => 'hs_import_batch_finished',
    );
    batch_set($batch);
  }
}


/**
 * @TODO
 */
function hs_import_batch_process($card, $source, &$context) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node');
  $query->entityCondition('bundle', 'carte');
  $query->fieldCondition('field_id', 'value', $card->id, '=');
  $query->range(0, 1);
  $result = $query->execute();
  $card_name = empty($card->name) ? $card->id : $card->name;
  if (isset($result['node'])) {
    $context['message'] = 'Mise à jour de "' . check_plain($card_name) . '" [' . $source . '].';
  }
  else {
    $context['message'] = 'Importation de "' . check_plain($card_name) . '" [' . $source . '].';
  }
  hs_import_batch_process_import_card($card, $source);
  $context['results'][] = check_plain($card_name) . ' [' . check_plain($card->id) . '].';
}


/**
 * @TODO
 */
function hs_import_batch_process_import_card($card, $source) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node');
  $query->entityCondition('bundle', 'carte');
  $query->fieldCondition('field_id', 'value', $card->id, '=');
  $query->range(0, 1);
  $result = $query->execute();
  if (isset($result['node'])) {
    $node = array_shift($result['node']);
    $node = node_load($node->nid);
  }
  else {
    $node = new stdClass();
    $node->type = 'carte';
    $node->language = LANGUAGE_NONE;
    $node->is_new = TRUE;
  }
  
  // Taxonomie : set
  $terms = taxonomy_get_term_by_name($source, 'set');
  if (!empty($terms)) {
    $term = array_shift($terms);
  }
  else {
    $vocab = taxonomy_vocabulary_machine_name_load('set');
  
    $term = new stdClass();
    $term->name = $source;
    $term->vid = $vocab->vid;
    taxonomy_term_save($term);
  }
  $node->field_set[LANGUAGE_NONE][0]['tid'] = $term->tid;
  
  // Autres valeurs
  foreach ($card as $property => $value) {
    switch ($property) {
      // Titre
      case 'name':
        $node->title = empty($value) ? $card->id : $value;
        break;
      // Valeurs numériques & booléennes
      case 'cost':
      case 'attack':
      case 'health':
      case 'durability':
      case 'collectible':
      case 'elite':
        $node->{'field_' . $property}[LANGUAGE_NONE][0]['value'] = (int) $value;
        break;
      // Taxonomies
      case 'type':
      case 'rarity':
      case 'faction':
      case 'race':
      case 'playerClass':
        $property = strtolower($property);
        $terms = taxonomy_get_term_by_name($value, $property);
        if (!empty($terms)) {
          $term = array_shift($terms);
        }
        else {
          $vocab = taxonomy_vocabulary_machine_name_load($property);
          
          $term = new stdClass();
          $term->name = $value;
          $term->vid = $vocab->vid;
          taxonomy_term_save($term);
        }
        $node->{'field_' . $property}[LANGUAGE_NONE][0]['tid'] = $term->tid;
        break;
      // Taxonomies multiples
      case 'mechanics':
        $property = strtolower($property);
        $cpt = 0;
        foreach ($value as $val) {
          $terms = taxonomy_get_term_by_name($val, $property);
          if (!empty($terms)) {
            $term = array_shift($terms);
          }
          else {
            $vocab = taxonomy_vocabulary_machine_name_load($property);
      
            $term = new stdClass();
            $term->name = $val;
            $term->vid = $vocab->vid;
            taxonomy_term_save($term);
          }
          $node->{'field_' . $property}[LANGUAGE_NONE][$cpt++]['tid'] = $term->tid;
        }
        break;
      // Défaut : valeurs textuelles
      default:
        $property = strtolower($property);
        $node->{'field_' . $property}[LANGUAGE_NONE][0]['value'] = $value;
        break;
    }
  }

  // Image carte
  $url = 'http://wow.zamimg.com/images/hearthstone/cards/frfr/original/' . $card->id . '.png'; 
  if (file_exists($url) && ($fic_picture = system_retrieve_file($url, NULL, TRUE, FILE_EXISTS_REPLACE))) {
    $node->field_picture[LANGUAGE_NONE][0] = (array) $fic_picture;
  }

  // Image carte dorée
  $url = 'http://wow.zamimg.com/images/hearthstone/cards/frfr/animated/' . $card->id . '_premium.gif';
  if (file_exists($url) && ($fic_picturegold = system_retrieve_file($url, NULL, TRUE, FILE_EXISTS_REPLACE))) {
    $node->field_picturegold[LANGUAGE_NONE][0] = (array) $fic_picturegold;
  }

  // Sauvegarde
  $node = node_submit($node);
  node_save($node);
}

function hs_import_batch_finished($success, $results, $operations) {
  // The 'success' parameter means no fatal PHP errors were detected. All
  // other error management should be handled using 'results'.
  if ($success) {
    $message = format_plural(count($results), 'Une carte importée.', '@count cartes importées.');
  }
  else {
    $message = 'Une erreur est survenue.';
  }
  drupal_set_message($message);
}
